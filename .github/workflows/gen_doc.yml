name: Documentation Generation

on:
  push:
    branches: [ "main" ]
    paths:
      - '**.md'
      - 'docs/**'
      - '**.py'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**.md'
      - 'docs/**'
      - '**.py'
  # Allow manual triggering
  workflow_dispatch:
  # Run weekly to ensure documentation stays updated
  schedule:
    - cron: '0 0 * * 0'  # Run at midnight on Sundays

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper versioning
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install documentation tools
        pip install mkdocs mkdocs-material pdoc3 pydocmd sphinx sphinx_rtd_theme
        # Install project dependencies
        if [ -f requirements.txt ]; then
          # Remove any triple quotes or docstrings from the beginning of the file
          sed -i '/^"""/d' requirements.txt
          sed -i '/^#/!b;:a;n;/^$/!ba;d' requirements.txt
          python -m pip install -r requirements.txt || echo "Warning: Some requirements could not be installed"
        fi
        if [ -f enhanced_requirements.txt ]; then
          # Remove any triple quotes or docstrings from the beginning of the file
          sed -i '/^"""/d' enhanced_requirements.txt
          sed -i '/^#/!b;:a;n;/^$/!ba;d' enhanced_requirements.txt
          python -m pip install -r enhanced_requirements.txt || echo "Warning: Some requirements could not be installed"
        fi
        # Install core dependencies explicitly
        pip install flask numpy scipy
    
    - name: Setup MkDocs
      run: |
        # Create MkDocs configuration if it doesn't exist
        if [ ! -f mkdocs.yml ]; then
          cat > mkdocs.yml << EOF
        site_name: AI Tool Documentation
        site_description: Documentation for the AI Tool with frequency generation capabilities
        site_author: AI Tool Team
        repo_url: https://github.com/yourusername/ai-tool
        theme:
          name: material
          palette:
            primary: indigo
            accent: indigo
          features:
            - navigation.tabs
            - navigation.sections
            - toc.integrate
            - search.suggest
            - search.highlight
        markdown_extensions:
          - admonition
          - codehilite
          - footnotes
          - toc:
              permalink: true
          - pymdownx.highlight
          - pymdownx.superfences
        nav:
          - Home: index.md
          - User Guide: 
            - Getting Started: user-guide/getting-started.md
            - Features: user-guide/features.md
            - Frequency Generator: user-guide/frequency-generator.md
            - Web Interface: user-guide/web-interface.md
          - API Reference:
            - Overview: api/overview.md
            - AI Models: api/ai-models.md
            - Social Media: api/social-media.md
            - News Analysis: api/news-analysis.md
          - Development:
            - Contributing: development/contributing.md
            - Architecture: development/architecture.md
        EOF
        fi
        
        # Create docs directory if it doesn't exist
        mkdir -p docs
        
        # Create index.md if it doesn't exist
        if [ ! -f docs/index.md ]; then
          cat > docs/index.md << EOF
        # AI Tool Documentation
        
        Welcome to the AI Tool documentation. This tool provides a comprehensive platform for connecting to AI models, social media platforms, and analyzing news trends.
        
        ## Features
        
        - Connect to multiple AI models through their APIs
        - Integrate with social media platforms
        - Analyze news and trends
        - Generate frequencies from text
        - Web-based user interface
        
        ## Getting Started
        
        See the [Getting Started](user-guide/getting-started.md) guide to begin using the AI Tool.
        
        ## API Reference
        
        Check the [API Reference](api/overview.md) for detailed information about the available APIs.
        EOF
        fi
        
        # Create directory structure for documentation
        mkdir -p docs/user-guide docs/api docs/development
    
    - name: Generate API Documentation
      run: |
        # Generate API documentation using pdoc3
        mkdir -p docs/api
        
        # Create a script to generate API documentation
        cat > generate_api_docs.py << EOF
        import os
        import sys
        import importlib
        import inspect
        import pdoc
        
        def generate_module_docs(module_name, output_dir):
            try:
                # Import the module
                module = importlib.import_module(module_name)
                
                # Generate documentation
                doc = pdoc.Module(module)
                
                # Write HTML documentation
                html = doc.html()
                
                # Convert to markdown (simplified approach)
                # In a real implementation, you might want to use a proper HTML to MD converter
                markdown = html.replace('<h1>', '# ').replace('<h2>', '## ').replace('<h3>', '### ')
                markdown = markdown.replace('</h1>', '\n').replace('</h2>', '\n').replace('</h3>', '\n')
                markdown = markdown.replace('<p>', '').replace('</p>', '\n\n')
                markdown = markdown.replace('<code>', '`').replace('</code>', '`')
                
                # Write to file
                output_file = os.path.join(output_dir, f"{module_name}.md")
                with open(output_file, 'w') as f:
                    f.write(markdown)
                
                print(f"Generated documentation for {module_name} at {output_file}")
                return True
            except Exception as e:
                print(f"Error generating documentation for {module_name}: {e}")
                return False
        
        # Main modules to document
        modules = [
            'api_connections',
            'social_media_integration',
            'news_analysis',
            'frequency_generator',
            'enhanced_frequency_generator',
            'app'
        ]
        
        # Create output directory
        os.makedirs('docs/api', exist_ok=True)
        
        # Generate documentation for each module
        for module in modules:
            try:
                generate_module_docs(module, 'docs/api')
            except:
                print(f"Could not generate documentation for {module}")
        EOF
        
        # Run the script to generate API documentation
        python generate_api_docs.py || echo "Warning: API documentation generation had some issues"
        
        # Create overview.md if it doesn't exist
        if [ ! -f docs/api/overview.md ]; then
          cat > docs/api/overview.md << EOF
        # API Reference Overview
        
        This section provides detailed documentation for the AI Tool's APIs and modules.
        
        ## Core Modules
        
        - **API Connections**: Interfaces with external AI models
        - **Social Media Integration**: Connects to social media platforms
        - **News Analysis**: Analyzes news and trends
        - **Frequency Generator**: Converts text to frequency patterns
        - **Enhanced Frequency Generator**: Adds audio capabilities to the frequency generator
        
        ## Usage Examples
        
        See the individual module documentation for usage examples.
        EOF
        fi
    
    - name: Extract Documentation from Python Files
      run: |
        # Create a script to extract docstrings from Python files
        cat > extract_docstrings.py << EOF
        import os
        import re
        import ast
        
        def extract_docstrings(file_path, output_dir, module_name):
            try:
                with open(file_path, 'r') as f:
                    content = f.read()
                
                # Parse the Python file
                tree = ast.parse(content)
                
                # Extract module docstring
                module_doc = ast.get_docstring(tree)
                
                # Extract class and function docstrings
                classes = {}
                functions = {}
                
                for node in ast.walk(tree):
                    if isinstance(node, ast.ClassDef):
                        class_doc = ast.get_docstring(node)
                        if class_doc:
                            classes[node.name] = class_doc
                    elif isinstance(node, ast.FunctionDef):
                        func_doc = ast.get_docstring(node)
                        if func_doc:
                            functions[node.name] = func_doc
                
                # Create markdown file
                output_file = os.path.join(output_dir, f"{module_name}.md")
                with open(output_file, 'w') as f:
                    f.write(f"# {module_name}\n\n")
                    
                    if module_doc:
                        f.write(f"{module_doc}\n\n")
                    
                    if classes:
                        f.write("## Classes\n\n")
                        for class_name, doc in classes.items():
                            f.write(f"### {class_name}\n\n")
                            f.write(f"{doc}\n\n")
                    
                    if functions:
                        f.write("## Functions\n\n")
                        for func_name, doc in functions.items():
                            f.write(f"### {func_name}\n\n")
                            f.write(f"{doc}\n\n")
                
                print(f"Extracted docstrings from {file_path} to {output_file}")
                return True
            except Exception as e:
                print(f"Error extracting docstrings from {file_path}: {e}")
                return False
        
        # Find all Python files
        python_files = []
        for root, dirs, files in os.walk('.'):
            if 'venv' in root or '.git' in root:
                continue
            for file in files:
                if file.endswith('.py'):
                    python_files.append(os.path.join(root, file))
        
        # Create output directories
        os.makedirs('docs/api', exist_ok=True)
        
        # Extract docstrings from each file
        for file_path in python_files:
            module_name = os.path.basename(file_path)[:-3]  # Remove .py extension
            extract_docstrings(file_path, 'docs/api', module_name)
        EOF
        
        # Run the script to extract docstrings
        python extract_docstrings.py || echo "Warning: Docstring extraction had some issues"
    
    - name: Generate User Guide
      run: |
        # Create user guide files if they don't exist
        mkdir -p docs/user-guide
        
        # Getting Started
        if [ ! -f docs/user-guide/getting-started.md ]; then
          cat > docs/user-guide/getting-started.md << EOF
        # Getting Started
        
        This guide will help you get started with the AI Tool.
        
        ## Installation
        
        1. Clone the repository:
           \`\`\`bash
           git clone https://github.com/yourusername/ai-tool.git
           cd ai-tool
           \`\`\`
        
        2. Install dependencies:
           \`\`\`bash
           pip install -r requirements.txt
           \`\`\`
        
        3. Configure API keys:
           Create a \`config.json\` file with your API keys.
        
        4. Run the application:
           \`\`\`bash
           python app.py
           \`\`\`
        
        ## First Steps
        
        1. Open your browser and navigate to \`http://localhost:5000\`
        2. Explore the different tabs in the interface
        3. Try generating a frequency from text
        4. Connect to AI models and social media platforms
        EOF
        fi
        
        # Features
        if [ ! -f docs/user-guide/features.md ]; then
          cat > docs/user-guide/features.md << EOF
        # Features
        
        The AI Tool provides the following features:
        
        ## AI Model Integration
        
        Connect to various AI models through their APIs:
        
        - Manus AI
        - DeepSeek
        - OpenAI
        - And more
        
        ## Social Media Integration
        
        Connect to social media platforms:
        
        - Twitter
        - Facebook
        - Instagram
        - TikTok
        - YouTube
        
        ## News Analysis
        
        Analyze news and trends:
        
        - Track breaking news
        - Identify trends
        - Predict potentially dangerous events
        
        ## Frequency Generator
        
        Convert text to frequencies:
        
        - Generate frequency patterns from text
        - Create audio output
        - Visualize frequencies
        - Communicate with AI models using frequencies
        EOF
        fi
        
        # Frequency Generator
        if [ ! -f docs/user-guide/frequency-generator.md ]; then
          cat > docs/user-guide/frequency-generator.md << EOF
        # Frequency Generator
        
        The Frequency Generator is a unique feature of the AI Tool that converts text to frequency patterns.
        
        ## How It Works
        
        1. Text is converted to a hash value
        2. The hash is used to generate a base frequency
        3. Harmonics are calculated based on the base frequency
        4. Modulation is applied for more complex patterns
        
        ## Audio Output
        
        The enhanced frequency generator can convert text to audio:
        
        1. Enter text in the input field
        2. Click "Generate Frequency"
        3. Use the audio player to listen to the generated audio
        4. Download the audio as a WAV file
        
        ## Visualization
        
        The frequency generator provides three visualization types:
        
        1. **Waveform**: Shows amplitude over time
        2. **Spectrum**: Shows frequency distribution
        3. **Spectrogram**: Shows frequency content over time
        
        ## Communicating with AI Models
        
        The frequency generator can be used to communicate with AI models:
        
        1. Select an AI model
        2. Enter a prompt
        3. Check "Bypass Restrictions" if needed
        4. Click "Communicate with Model"
        EOF
        fi
        
        # Web Interface
        if [ ! -f docs/user-guide/web-interface.md ]; then
          cat > docs/user-guide/web-interface.md << EOF
        # Web Interface
        
        The AI Tool provides a web-based user interface for easy access to all features.
        
        ## Dashboard
        
        The dashboard provides an overview of all features:
        
        - AI Models
        - Social Media
        - News Analysis
        - Frequency Generator
        - Settings
        
        ## Navigation
        
        Use the tabs at the top of the page to navigate between features.
        
        ## Theme
        
        The interface supports both light and dark themes. Use the theme toggle in the settings tab to switch between themes.
        
        ## Responsive Design
        
        The interface is responsive and works on both desktop and mobile devices.
        EOF
        fi
    
    - name: Generate Development Documentation
      run: |
        # Create development documentation files if they don't exist
        mkdir -p docs/development
        
        # Contributing
        if [ ! -f docs/development/contributing.md ]; then
          cat > docs/development/contributing.md << EOF
        # Contributing
        
        Thank you for considering contributing to the AI Tool project!
        
        ## Development Setup
        
        1. Fork the repository
        2. Clone your fork:
           \`\`\`bash
           git clone https://github.com/yourusername/ai-tool.git
           cd ai-tool
           \`\`\`
        
        3. Create a virtual environment:
           \`\`\`bash
           python -m venv venv
           source venv/bin/activate  # On Windows: venv\Scripts\activate
           \`\`\`
        
        4. Install development dependencies:
           \`\`\`bash
           pip install -r requirements.txt
           pip install pytest flake8
           \`\`\`
        
        ## Code Style
        
        We follow PEP 8 style guidelines. Run flake8 to check your code:
        
        \`\`\`bash
        flake8 .
        \`\`\`
        
        ## Testing
        
        Run tests with pytest:
        
        \`\`\`bash
        pytest
        \`\`\`
        
        ## Pull Request Process
        
        1. Ensure your code passes all tests
        2. Update the documentation if needed
        3. Submit a pull request with a clear description of the changes
        EOF
        fi
        
        # Architecture
        if [ ! -f docs/development/architecture.md ]; then
          cat > docs/development/architecture.md << EOF
        # Architecture
        
        The AI Tool is built with a modular architecture to ensure flexibility and maintainability.
        
        ## Component Overview
        
        ```
        AI Tool
        ├── app.py                         # Flask web application
        ├── enhanced_frequency_generator.py # Enhanced frequency generator with audio
        ├── api_connections.py             # API connection framework
        ├── social_media_integration.py    # Social media integration
        ├── news_analysis.py               # News analysis engine
        ├── frequency_generator.py         # Original frequency generator
        ├── templates/                     # HTML templates
        │   └── index.html                 # Main dashboard template
        ├── static/                        # Static assets
        │   ├── css/                       # CSS stylesheets
        │   │   └── style.css              # Main stylesheet
        │   └── js/                        # JavaScript files
        │       └── main.js                # Main JavaScript file
        └── tests/                         # Test files
        ```
        
        ## Module Descriptions
        
        ### API Connections
        
        Handles connections to external AI models and services.
        
        ### Social Media Integration
        
        Manages connections to social media platforms and data retrieval.
        
        ### News Analysis
        
        Processes news data and identifies trends and potential events.
        
        ### Frequency Generator
        
        Converts text to frequency patterns and provides communication with AI models.
        
        ### Enhanced Frequency Generator
        
        Extends the frequency generator with audio output capabilities.
        
        ### Web Application
        
        Provides a user interface for interacting with all components.
        EOF
        fi
    
    - name: Build Documentation
      run: |
        # Build MkDocs site
        mkdocs build
        
        # Create a .nojekyll file to prevent GitHub Pages from ignoring files that begin with an underscore
        touch site/.nojekyll
    
    - name: Deploy to GitHub Pages
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: site
        branch: gh-pages
    
    - name: Create Documentation Artifact
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: site/
